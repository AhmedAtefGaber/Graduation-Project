- name: setting hosts file on all servers
  hosts: all
  tasks:

   - name: setting hostnames of all servers
     hostname:
      name:   "{{ inventory_hostname }}"
     tags: all-servers

   - name: setting hosts file
     template:
      src: hosts.j2
      dest: /etc/hosts
     tags: all-servers


- name: wordpress 
  hosts: apps
  tasks:

   - name: Adding repository of Glusterfs
     apt_repository:
      repo: 'ppa:gluster/glusterfs-7'
      state: present
      update_cache: true
     tags:
      - gluster


   - name: install apache,php modules,libraries and updating apt
     apt:
      name: "{{item}}"
      state: latest
      update_cache: yes

     loop:
      - apache2
      - unzip  
      - php
      - php-mysql
      - libapache2-mod-php
      - glusterfs-server
     tags:
      - wordpress
      - gluster


     
   - name: Enable and start  service httpd and ufw 
     service:
      name: "{{item}}"
      enabled: yes
      state: started
     loop:
      - apache2
      - ufw
      - glusterd
     tags:
      - wordpressa
      - gluster

   - name: Allow all access from RFC1918 networks to this host
     ufw:
      rule: allow
      state: enabled
      port: "{{ item }}"
     loop:
      - 22
      - 3306
      - 80
      - 443
      - 24007
     tags:
      - wordpress
      - gluster

   - name: peering the nodes
     command: gluster peer probe node2.app1.project.com
     when: inventory_hostname == 'node1.app1.project.com'
     tags:
      - gluster

   - name: peering the nodes
     command: gluster peer probe node1.app1.project.com
     when: inventory_hostname == 'node2.app1.project.com'
     tags:
      - gluster

   - name: Glusterfs configurations
     gluster_volume:
      state: present
      name: gv0
      bricks: /mnt/gv0
      replicas: 2
      cluster:
       - node1.app1.project.com
       - node2.app1.project.com
      force: true
     run_once: true
     tags:
      - cluster1

   - name: Mount and bind a volume
     mount:
      path: /var/www/html
      src: "{{ inventory_hostname }}:/gv0"
      opts: "defaults,_netdev"
      state: mounted
      fstype: glusterfs
     tags:
      - cluster1

   

   - name: Extract wordpress into /var/www/
     unarchive:
      src: https://wordpress.org/latest.zip
      dest: /var/www/
      remote_src: yes
     tags:
      - wordpress


   - name: Create a directory if it does not exist
     file:
      path: /var/www/wordpress
      state: directory
      owner: www-data
      group: www-data
      mode: 0755
      recurse: yes
     tags:
      - wordpress


   - name: Renaming wp-config
     command: mv /var/www/wordpress/wp-config-sample.php /var/www/wordpress/wp-config.php
     tags:
      - wordpress


   - name: configuring wp-config.php
     template:
      src: temp.j2
      dest: /var/www/wordpress/wp-config.php
      owner: www-data
      group: www-data
      mode: 0755
     tags:
      - wordpress

   - name: configuring apache
     template:
      src: apache.j2
      dest: /etc/apache2/sites-available/app1.com.conf
     tags:
      - wordpress



   - name: Enablsding the virtual host
     command:  "{{item}}"
     loop:
     - a2ensite app1.com.conf
     - a2dissite 000-default.conf
     - a2dissite domain.com.conf
     - a2enmod ssl
     - a2enmod headers
     - systemctl restart apache2
     tags:
      - wordpress



#================================ Loadbalacer ============================================
- name: Loadbalancer Configuration
  hosts: lb 
  tasks:

   - name: installing nginx
     yum:
      name: "{{item}}"
      state: latest
     loop:
      - openssl
      - python-pip  
      - nginx
     tags:
      - lb		

   - name: Ensure python OpenSSL dependencies are installed.
     pip:
      name: pyOpenSSL
      state: present
     tags:
      - lb

   - name: create /etc/ssl/private directory
     file:
      path: /etc/ssl/private
      state: directory
     tags:
      - lb

   - name: 
     file:
      path: /etc/ssl/certs
      state: directory
     tags:
      - lb

   - name: Generate an OpenSSL private key.
     openssl_privatekey:
      path: /etc/ssl/private/ansible.com.pem
     tags:
      - lb

   - name: Generate an OpenSSL Certificate Signing Request
     openssl_csr:
      path: /etc/ssl/certs/www.ansible.com.csr
      privatekey_path: /etc/ssl/private/ansible.com.pem
      common_name: www.ansible.com
     tags:
      - lb


   
   - name: Generate a Self Signed OpenSSL certificate
     openssl_certificate:
      path: /etc/ssl/certs/ansible.com.crt
      privatekey_path:  /etc/ssl/private/ansible.com.pem
      csr_path: /etc/ssl/certs/www.ansible.com.csr
      provider: selfsigned
     tags:
      - lb

   - name: Allow all access from RFC1918 networks to this host
     block: 
     - firewalld:
        port: 443/tcp
        permanent: yes
        state: enabled
        immediate: yes
     rescue: 
     - service:
        name: firewalld
        state: started
        enabled: yes
     - firewalld:
        port: 443/tcp
        permanent: yes
        state: enabled
        immediate: yes

  
     tags:
      - lb


   - name: configuring apache
     template:
      src: nginx.j2
      dest: /etc/nginx/conf.d/load.conf
     tags:
      - lb

   - name: configuring apache
     template:
      src: nginx.default.j2
      dest: /etc/nginx/nginx.conf
     tags:
      - lb


   - name: Touch a file, using symbolic modes to set the permissions (equivalent to 0644)
     file:
      path:  /etc/nginx/conf.d/default.conf
      state: absent
     tags:
      - lb 

   - name: start nginx
     service:
      name: nginx
      state: started
      enabled: yes 
     tags:
      - lb

#=============================== Database ==================================
- name: Mysql installation
  hosts: db
  tasks:
  - name: Installing mariadb-server
    apt:
      pkg: mysql-server
      update_cache: yes
      cache_valid_time: 86400
      state: present
    tags:
     - db

  - name: Start MariaDB
    service:
      name: mysql
      state: started
      enabled: yes
    tags:
     - db


  - name: Installing dependencies
    apt:
      pkg: [ 'python-mysqldb', 'php-mysql' ]
      update_cache: yes
      cache_valid_time: 86400
      state: present
    tags:
     - db


  - name: Ensure SELinux is set to enforcing mode
    lineinfile:
     path: /etc/mysql/mysql.conf.d/mysqld.cnf
     regexp: '^bind-address'
     line: bind-address            = 0.0.0.0
    tags:
     - db


  - name: restart apache
    service:
      name: "{{item}}"
      state: restarted
    loop:
      - mysql 
      - ufw
    tags:
     - db

  - name: Allow all access from RFC1918 networks to this host
    ufw:
     rule: allow
     state: enabled
     port: "{{ item }}"
    loop:
      - 22
      - 3306
      - 80
      - 443
    tags:
     - db


  - name: Create mysql database
    mysql_db:
      name: wordpress_db
      state: present
      login_unix_socket: /var/run/mysqld/mysqld.sock #path to Unix domain socket for local connection

    tags:
     - db

  - name: Create mysql user
    mysql_user:
      name: wordpress_user
      password: 12345678
      priv: '*.*:ALL'
      host: "{{item}}"
    loop:
     - localhost
     - node1.app1.project.com
     - node2.app1.project.com
    tags:
     - db
#=============================== Nagios ==========================================
- name: nagios server
  hosts: nagios
  gather_facts: no
  tasks:
   - name: Ensure group "somegroup" exists
     group:
      name: nagcmd
      state: present
     tags:
      - nagios_server

   - name: Pre-configuration
     user:
      name: nagios
      password: $1$2lDCWevR$SdX6VSEYKuEGXwO3JlIFe/
      groups: nagcmd
      append: yes


   - name: add nagios to sudoers
     lineinfile:
      path: /etc/sudoers
      line: "nagios ALL=(ALL) NOPASSWD: ALL"


   - name: firewall configs
     firewalld:
      port: "{{item}}"
      permanent: yes
      state: enabled
      immediate: yes
     loop:
      - 161/udp
      - 162/udp
      - 80/tcp
      - 443/tcp
      - 5666/tcp
      - 22/tcp

   - name: Disable SELinux
     selinux:
      state: disabled


   - name: installing packages
     yum:
      name: epel-release
      state: latest



   - name: installing packages
     yum:
      name: "{{item}}"
      enablerepo: "epel"
      state: latest
     loop:
      - httpd
      - mariadb-server
      - mariadb
      - php
      - php-mysql
      - gcc
      - glibc
      - glibc-common
      - gd
      - gd-devel
      - make
      - net-snmp
      - openssl-devel
      - xinetd
      - unzip
      - perl
      - git
      - mailx
      - python-pip

   - name: install python dependency
     pip:
      name: passlib



   - name: Enable service httpd, and not touch the state
     service:
      name: "{{item}}"
      state: started
      enabled: yes
     loop:
      - httpd
      - mariadb

   - name: apache user configs
     user:
      name: apache
      groups: nagcmd

   - name: cloning the repo
     git:
      repo: 'https://github.com/Ahmed-Gebaly/iTi-SystemAdmin40.git'
      dest: /home/nagios/iTi-SystemAdmin40
      clone: yes
      update: yes
     become_user: nagios

   - name: unarchiving
     unarchive:
      src: "{{item}}"
      dest: /home/nagios/
      remote_src: yes
     loop:
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Packages/nagios-4.4.6.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Packages/nagios-plugins-2.3.3.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Packages/nrpe-4.0.2.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Config.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-host-plugins.tar.gz

     become_user: nagios

   - name: nagios
     command: chown -R nagios:nagios /usr/local/nagios


   - name: copying
     copy:
      src: /home/nagios/libexec/eventhandlers
      dest: /usr/local/nagios/libexec
      force: yes
      remote_src: yes
     become_user: nagios
     tags: x

   - name: copying
     copy:
      src: /home/nagios/etc
      dest: /usr/local/nagios/
      force: yes
      remote_src: yes
     become_user: nagios
     tags: x


   - name: compiling src code
     command: "{{item}}"
     args:
      chdir: /home/nagios/nagios-4.4.6
     loop:
      - ./configure --with-nagios-group=nagios --with-command-group=nagcmd
      - make all
     become_user: nagios

   - name: nagios
     command: "{{item}}"
     args:
      chdir: /home/nagios/nagios-4.4.6
     loop:
      - make install
      - make install-commandmode
      - make install-init
      - make install-config
      - make install-webconf

   - name: nagios plugins
     command: "{{item}}"
     args:
      chdir: /home/nagios/nagios-plugins-2.3.3
     loop:
      - ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl
      - make
     become_user: nagios

   - name: nagios plugin making
     command: make install
     args:
      chdir: /home/nagios/nagios-plugins-2.3.3
   - name: nagios NRPE
     command: "{{item}}"
     args:
      chdir: /home/nagios/nrpe-4.0.2
     loop:
      - ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu
      - make all
     become_user: nagios

   - name: nagios plugin making
     command: "{{item}}"
     args:
      chdir: /home/nagios/nrpe-4.0.2
     loop:
      - make install
      - make install-inetd

   - name: Ensure SELinux is set to enforcing mode
     lineinfile:
      path: /etc/xinetd.d/nrpe
      regexp: '^    only_from       = 127.0.0.1 '
      line: "    only_from       = 127.0.0.1  {{inventory_hostname}}"


   - name: restart xinted
     service:
      name: xinetd
      state: restarted

   - name: htpasswd
     htpasswd:
      path: /usr/local/nagios/etc/htpasswd.users
      name: nagiosadmin
      password: 123456


   - name: nagios NRPE
     command: "{{item}}"
     loop:
      - systemctl daemon-reload
      - systemctl start nagios
      - systemctl enable nagios
      - systemctl restart httpd


   - name: mail configuration
     lineinfile:
      path: /etc/mail.rc
      line: "{{item}}"
     loop:
      - "smtp=smtps://smtp.gmail.com:465"
      - "smtp-auth=login"
      - "smtp-auth-user=iti.project.2020@gmail.com"
      - "smtp-auth-password=@itisa40"
      - "ssl-verify=ignore"
      - "nss-config-dir=/etc/pki/nssdb/"

#====================================================HOST-NAGIOS-======================================================================

- name: nagios host playbook
  hosts: centos
  tags:
      - nagios_centos
  tasks:
   - name: firewall configs
     firewalld:
      port: "{{item}}"
      permanent: yes
      state: enabled
      immediate: yes
     loop:
      - 80/tcp
      - 443/tcp
      - 5666/tcp
      - 22/tcp
     tags: host

   - name: installing packages
     yum:
      name: epel-release
      state: latest
     tags: host


   - name: installing packages
     yum:
      name: "{{item}}"
      enablerepo: "epel"
      state: latest
     loop:
      - nrpe
      - nagios-plugins-all
      - sysstat
      - bc
      - git
     tags: host
   - name: cloning the repo
     git:
      repo: 'https://github.com/Ahmed-Gebaly/iTi-SystemAdmin40.git'
      dest: /home/nagios/iTi-SystemAdmin40
      clone: yes
      update: yes
     tags: host

   - name: unarchiving
     unarchive:
      src: /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-host-plugins.tar.gz
      dest: /home/nagios/iTi-SystemAdmin40/
      remote_src: yes
     tags: host
#============================================== Nagios Ubuntu Host =====================================
- name: nagios host playbook
  hosts: ubuntu
  tasks:
   - name: install needed pacakges
     apt:
      name: "{{item}}"
      state: latest
      update_cache: yes

     loop:
      - nagios-plugins 
      - nagios-nrpe-server 
      - sysstat  
      - bc 
     tags:
      - nagios_ubuntu
     
   - name: Allow ports
     ufw:
      rule: allow
      state: enabled
      port: 5666
     tags:
      - nagios_ubuntu
   
   - name: copy nagios plugins
     copy:
      src: /home/nagios/plugins/
      dest: /usr/lib/nagios/plugins/
      force: yes
     become_user: nagios
     tags: x
   - name: cloning the repo
     git:
      repo: 'https://github.com/Ahmed-Gebaly/iTi-SystemAdmin40.git'
      dest: /home/nagios/iTi-SystemAdmin40
      clone: yes
      update: yes
     tags: nagios_ubuntu

   - name: unarchiving
     unarchive:
      src: /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-host-plugins.tar.gz
      dest:  /home/nagios/iTi-SystemAdmin40/
      remote_src: yes
     tags: nagios_ubuntu
#========================================= Ansible Master ===================================================
- name: nagios host playbook
  hosts: ansible
  tasks:
   - name: Create Nagios User on Ansible Machine
     user:
      name: nagios
      password: $1$2lDCWevR$SdX6VSEYKuEGXwO3JlIFe/
      home: /home/nagios
      shell: /bin/bash
     tags:
      - ansible_nagios

   - name: add nagios to sudoers
     lineinfile:
      path: /etc/sudoers
      line: "nagios ALL=(ALL) NOPASSWD: ALL"

   - name: cloning the repo
     git:
      repo: 'https://github.com/Ahmed-Gebaly/iTi-SystemAdmin40.git'
      dest: /home/nagios/iTi-SystemAdmin40
      clone: yes
      update: yes
     become_user: nagios
     tags:
      - ansible_nagios

   - name: unarchiving
     unarchive:
      src: "{{item}}"
      dest: /home/nagios/
     loop:
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Packages/nagios-4.4.6.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Packages/nagios-plugins-2.3.3.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Packages/nrpe-4.0.2.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-Server-Config.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Final-Project/Nagios-host-plugins.tar.gz
     become_user: nagios
     tags:
      - ansible_nagios

